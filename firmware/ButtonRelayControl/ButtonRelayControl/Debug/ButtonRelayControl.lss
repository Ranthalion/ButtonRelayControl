
ButtonRelayControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000002b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001334  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfb  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074a  00000000  00000000  0000234f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00002a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086d  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a7  00000000  00000000  00003549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_13>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  d4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  dc:	0e 94 7e 00 	call	0xfc	; 0xfc <system_init>
  e0:	08 95       	ret

000000e2 <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  e2:	0e 94 6e 00 	call	0xdc	; 0xdc <atmel_start_init>
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x4>

000000e8 <PWM_0_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
  e8:	56 9a       	sbi	0x0a, 6	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
  ea:	5e 98       	cbi	0x0b, 6	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_0_init();
  ec:	0e 94 ac 00 	call	0x158	; 0x158 <PWM_0_init>
  f0:	08 95       	ret

000000f2 <PWM_1_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
  f2:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
  f4:	29 98       	cbi	0x05, 1	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_1_init();
  f6:	0e 94 c7 00 	call	0x18e	; 0x18e <PWM_1_init>
  fa:	08 95       	ret

000000fc <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
  fc:	8d e3       	ldi	r24, 0x3D	; 61
  fe:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 108:	94 b1       	in	r25, 0x04	; 4
 10a:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 110:	97 b1       	in	r25, 0x07	; 7
 112:	90 78       	andi	r25, 0x80	; 128
 114:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 116:	98 b1       	in	r25, 0x08	; 8
 118:	9f 67       	ori	r25, 0x7F	; 127
 11a:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 11c:	9a b1       	in	r25, 0x0a	; 10
 11e:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 124:	8d b1       	in	r24, 0x0d	; 13
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 12a:	8e b1       	in	r24, 0x0e	; 14
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	60 e8       	ldi	r22, 0x80	; 128
 134:	81 e6       	ldi	r24, 0x61	; 97
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 a5 00 	call	0x14a	; 0x14a <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 13c:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 13e:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	PWM_0_initialization();
 140:	0e 94 74 00 	call	0xe8	; 0xe8 <PWM_0_initialization>

	PWM_1_initialization();
 144:	0e 94 79 00 	call	0xf2	; 0xf2 <PWM_1_initialization>
 148:	08 95       	ret

0000014a <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 14a:	2f b7       	in	r18, 0x3f	; 63
	cli
 14c:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 14e:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 150:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 152:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 154:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 156:	08 95       	ret

00000158 <PWM_0_init>:
 *
 * \return Nothing.
 */
void PWM_1_register_callback(pwm_irq_cb_t f)
{
	PWM_1_cb = f;
 158:	e4 e6       	ldi	r30, 0x64	; 100
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	80 83       	st	Z, r24
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	84 bd       	out	0x24, r24	; 36
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret

0000016a <__vector_16>:
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	a8 9a       	sbi	0x15, 0	; 21
 178:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <callback_count.1850>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <callback_count.1850>
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <PWM_1_init>:
 18e:	e4 e6       	ldi	r30, 0x64	; 100
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	80 83       	st	Z, r24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 19e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret

000001a6 <__vector_13>:
}

ISR(TIMER1_OVF_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TIFR1 = TOV1;
 1b2:	16 ba       	out	0x16, r1	; 22

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_1_INTERRUPT_CB_RATE) && (PWM_1_INTERRUPT_CB_RATE != 0)) {
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (PWM_1_cb != NULL) {
			PWM_1_cb();
		}
	}
}
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
