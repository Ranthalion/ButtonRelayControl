
ButtonRelayControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  000002b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a21  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cd5  00000000  00000000  00001e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000946  00000000  00000000  00002b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00003484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a49  00000000  00000000  000036bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a7  00000000  00000000  00004105  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000044ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a0 30       	cpi	r26, 0x00	; 0
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  d4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  dc:	0e 94 97 00 	call	0x12e	; 0x12e <system_init>
  e0:	08 95       	ret

000000e2 <main>:
#include <program.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  e2:	0e 94 6e 00 	call	0xdc	; 0xdc <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		loop();
  e6:	0e 94 76 00 	call	0xec	; 0xec <loop>
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x4>

000000ec <loop>:
 *
 * \param[in] pin       The pin number for device
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
	PIND = 1 << pin;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	89 b9       	out	0x09, r24	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	84 e3       	ldi	r24, 0x34	; 52
  f4:	9c e0       	ldi	r25, 0x0C	; 12
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <loop+0xa>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <loop+0x14>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <EXTERNAL_IRQ_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 104:	22 98       	cbi	0x04, 2	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
 106:	2a 98       	cbi	0x05, 2	; 5
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 108:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 10a:	5a 98       	cbi	0x0b, 2	; 11
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 10c:	53 98       	cbi	0x0a, 3	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 10e:	5b 98       	cbi	0x0b, 3	; 11
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 110:	57 98       	cbi	0x0a, 7	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 112:	5f 98       	cbi	0x0b, 7	; 11
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	EXTERNAL_IRQ_0_init();
 114:	0e 94 c6 00 	call	0x18c	; 0x18c <EXTERNAL_IRQ_0_init>
 118:	08 95       	ret

0000011a <LED_SW2_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 11a:	56 9a       	sbi	0x0a, 6	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 11c:	5e 98       	cbi	0x0b, 6	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED_SW2_init();
 11e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_SW2_init>
 122:	08 95       	ret

00000124 <LED_SW1_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 124:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 126:	29 98       	cbi	0x05, 1	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED_SW1_init();
 128:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_SW1_init>
 12c:	08 95       	ret

0000012e <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 12e:	8d e3       	ldi	r24, 0x3D	; 61
 130:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 13a:	94 b1       	in	r25, 0x04	; 4
 13c:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 13e:	95 b1       	in	r25, 0x05	; 5
 140:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 142:	97 b1       	in	r25, 0x07	; 7
 144:	90 78       	andi	r25, 0x80	; 128
 146:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 148:	98 b1       	in	r25, 0x08	; 8
 14a:	9f 67       	ori	r25, 0x7F	; 127
 14c:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 14e:	9a b1       	in	r25, 0x0a	; 10
 150:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 152:	9b b1       	in	r25, 0x0b	; 11
 154:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 156:	8d b1       	in	r24, 0x0d	; 13
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 15c:	8e b1       	in	r24, 0x0e	; 14
 15e:	8f 60       	ori	r24, 0x0F	; 15
 160:	8e b9       	out	0x0e, r24	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 162:	26 9a       	sbi	0x04, 6	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 164:	2e 98       	cbi	0x05, 6	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 166:	50 9a       	sbi	0x0a, 0	; 10
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
 168:	58 9a       	sbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
 16a:	69 9a       	sbi	0x0d, 1	; 13
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTE |= 1 << pin;
	} else {
		PORTE &= ~(1 << pin);
 16c:	71 98       	cbi	0x0e, 1	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	60 e8       	ldi	r22, 0x80	; 128
 172:	81 e6       	ldi	r24, 0x61	; 97
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 17a:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 17c:	15 be       	out	0x35, r1	; 53
	    // <true"> High
	    false);

	sysctrl_init();

	EXTERNAL_IRQ_0_initialization();
 17e:	0e 94 82 00 	call	0x104	; 0x104 <EXTERNAL_IRQ_0_initialization>

	LED_SW2_initialization();
 182:	0e 94 8d 00 	call	0x11a	; 0x11a <LED_SW2_initialization>

	LED_SW1_initialization();
 186:	0e 94 92 00 	call	0x124	; 0x124 <LED_SW1_initialization>
 18a:	08 95       	ret

0000018c <EXTERNAL_IRQ_0_init>:
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{

	PCICR = (1 << PCIE0) | // Enable pin change interrupt 0
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	        (1 << PCIE2) | // Enable pin change interrupt 2
	        (1 << PCIE2) | // Enable pin change interrupt 2
	        (1 << PCIE2);  // Enable pin change interrupt 2

	PCMSK2 = (1 << PCINT18) | // Pin change enable mask 18
 192:	8c e8       	ldi	r24, 0x8C	; 140
 194:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	         (1 << PCINT19) | // Pin change enable mask 19
	         (1 << PCINT23);  // Pin change enable mask 23

	PCMSK0 = (1 << PCINT2); // Pin change enable mask 2
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>

	return 0;
}
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 1a2:	2f b7       	in	r18, 0x3f	; 63
	cli
 1a4:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1a6:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 1a8:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 1aa:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 1ac:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 1ae:	08 95       	ret

000001b0 <LED_SW2_init>:
 *
 * \return Nothing
 */
void LED_SW2_load_duty_cycle_ch1(LED_SW2_register_t duty_value)
{
	OCR0B = duty_value;
 1b0:	e4 e6       	ldi	r30, 0x64	; 100
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	80 83       	st	Z, r24
 1ba:	83 ec       	ldi	r24, 0xC3	; 195
 1bc:	84 bd       	out	0x24, r24	; 36
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	85 bd       	out	0x25, r24	; 37
 1c2:	88 e9       	ldi	r24, 0x98	; 152
 1c4:	87 bd       	out	0x27, r24	; 39
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret

000001ca <LED_SW1_init>:
 */
int8_t LED_SW1_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 1ca:	e4 e6       	ldi	r30, 0x64	; 100
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	87 7f       	andi	r24, 0xF7	; 247
 1d2:	80 83       	st	Z, r24

	TCCR1A = (1 << COM1A1) | (1 << COM1A0)   /* Set OCA on Compare Match, clear OCA on BOTTOM (inverting mode) */
 1d4:	81 ec       	ldi	r24, 0xC1	; 193
 1d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	         | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	         | (0 << WGM11) | (1 << WGM10);  /* TC16 Mode 5 Fast 8-bit PWM */

	TCCR1B = (0 << WGM13) | (1 << WGM12)                /* TC16 Mode 5 Fast 8-bit PWM */
 1da:	8b e0       	ldi	r24, 0x0B	; 11
 1dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	         | 0 << ICES1                               /* Input Capture Edge Select: disabled */
	         | (0 << CS12) | (1 << CS11) | (1 << CS10); /* IO clock divided by 64 */

	// ICR1 = 0x0; /* Input capture value: 0x0 */

	OCR1A = 0x96; /* Output compare A: 0x96 */
 1e0:	86 e9       	ldi	r24, 0x96	; 150
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
